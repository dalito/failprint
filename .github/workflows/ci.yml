name: ci

on:
  push:
  pull_request:
    branches:
    - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHONIOENCODING: UTF-8
  PYTHON_VERSIONS: ""

jobs:

  quality:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Setup uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: pyproject.toml

    - name: Install dependencies
      run: make setup

    - name: Check if the documentation builds correctly
      run: make check-docs

    - name: Check the code quality
      run: make check-quality

    - name: Check if the code is correctly typed
      run: make check-types

    - name: Check for breaking changes in the API
      run: make check-api

  tests:

    strategy:
      matrix:
        os:
        # - ubuntu-latest
        # - macos-latest
        - windows-latest
        python-version:
        # - "3.9"
        # - "3.10"
        # - "3.11"
        - "3.12"
        - "3.13"
        # - "3.14"
        resolution:
        - highest
        - lowest-direct
        exclude:
        - os: macos-latest
          resolution: lowest-direct
        - os: windows-latest
          resolution: lowest-direct
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.python-version == '3.14' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true

    - name: Setup uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: pyproject.toml
        cache-suffix: py${{ matrix.python-version }}

    - name: Install dependencies
      env:
        UV_RESOLUTION: ${{ matrix.resolution }}
      run: make setup

    - name: Run tests on Windows with cp850 locale
      if: ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      env:
        # See https://docs.python.org/3/library/io.html#io-encoding-warning
        PYTHONWARNDEFAULTENCODING: 1
      run: |
        echo "Initial $OutputEncoding (should be UTF-8):", $OutputEncoding
        python --version
        python -c "import os; print(f'stdin encoding : {os.device_encoding(0)}')"
        python -c "import os; print(f'stdout encoding: {os.device_encoding(1)}')"
        python -c "import sys; print(f'utf8 mode: {sys.flags.utf8_mode}')"
        python -c "import locale; print(f'locale encoding: {locale.getencoding()}')"
        echo "Set $OutputEncoding to cp850 as for many European Windows installations"
        $OutputEncoding = [console]::InputEncoding = [console]::OutputEncoding = [System.Text.Encoding]::GetEncoding(850)
        $OutputEncoding
        python -c "import os; print(f'stdin encoding : {os.device_encoding(0)}')"
        python -c "import os; print(f'stdout encoding: {os.device_encoding(1)}')"
        python -c "import sys; print(f'utf8 mode: {sys.flags.utf8_mode}')"
        python -c "import locale; print(f'locale encoding: {locale.getencoding()}')"
        uv run pytest --capture=no

    # - name: Run the test suite
    #   run: make test

